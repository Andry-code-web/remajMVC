<!-- views/auctions/details.ejs -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.20/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.20/dist/sweetalert2.all.min.js"></script>
<link rel="stylesheet" href="/css/metodopago/metodopago.css">

<div class="active-auction-card">
  <div class="active-auction-header">
    <div class="active-property-type">
      <%= auction.categoria %>
    </div>
    <h2 class="active-property-location">
      <%= auction.ubicacion %>
    </h2>
  </div>

  <div class="active-tabs">
    <button class="active-tab active" data-tab="active-panel">Panel</button>
    <button class="active-tab" data-tab="active-classification">Clasificación</button>
  </div>

  <div id="active-panel" class="active-content-section active">
    <!-- Estado: En Curso -->
    <div class="active-panel-content" id="en_curso"
      style="display: <%= auction.estado === 'en_curso' ? 'block' : 'none' %>">
      <div class="active-user-info">
        <div class="active-user">
          <span class="active-label">Usuario:</span>
          <span class="active-value">
            <%= user?.usuario || 'Anónimo' %>
          </span>
        </div>
      </div>

      <div class="active-best-offer">
        <div class="active-crown-label">
          <span class="active-crown">👑</span>
          <span>Precio Inicial</span>
        </div>
        <div class="active-amount">USD$ <%= auction.precios %>
        </div>
      </div>

      <div class="active-bid-controls">
        <button class="active-join-button" id="unirse" data-auction-id="<%= auction.id %>">Unirse a la subasta</button>
      </div>
    </div>

    <!-- Estado: Finalizado -->
    <div class="finished-panel-content" style="display: <%= auction.estado === 'finalizado' ? 'block' : 'none' %>">
      <div class="finished-best-offer">
        <div class="finished-crown-label">
          <span class="finished-crown">👑</span>
          <span>Oferta Ganadora</span>
        </div>
        <div class="finished-amount">USD$ <%= auction.monto_venta %>
        </div>
      </div>
      <% if (auction.ganador) { %>
        <div class="finished-winner">
          <span>Ganador:</span>
          <span class="winner-id">
            <%= auction.ganador %>
          </span>
        </div>
        <% } %>
    </div>

    <!-- Estado: Activo -->
    <div class="in-progress-panel-content" style="display: <%= auction.estado === 'activo' ? 'block' : 'none' %>">
      <div class="progress-user-info">
        <div class="progress-user">
          <span class="progress-label">Usuario:</span>
          <span class="progress-value">
            <%= user?.usuario || 'Anónimo' %>
          </span>
        </div>
      </div>

      <div class="progress-best-offer">
        <div class="progress-crown-label">
          <span class="progress-crown">👑</span>
          <span>Mejor Oferta</span>
        </div>
        <div class="progress-amount">USD$ <%= auction.monto_venta %>
        </div>
      </div>

      <div class="progress-bid-section">
        <div class="progress-bid-input">
          <span class="progress-currency">$</span>
          <input type="number" id="progress-bidAmount" value="<%= auction.monto_venta %>">
        </div>
        <button class="progress-bid-button">Monto</button>
      </div>
    </div>

    <!-- Chat (inicialmente oculto) -->
    <div id="auction-chat" class="chat" style="display: none;">
      <section id="chat">
        <!-- Contenedor de la barra de progreso -->
        <div id="timer-container">
          <div id="timer-bar"></div>
        </div>
        <ul id="messages"></ul>

        <!-- Formulario de oferta -->
        <form id="form-bid" class="message-form">
          <div class="input-container">
            <input type="number" id="input-bid" class="input-field" placeholder="Escribe un monto" autocomplete="off" />
            <button type="submit" class="send-btn">
              Enviar
            </button>
          </div>
        </form>

        <!-- Formulario de oferta sugerida -->
        <form id="form-suggested-bid" class="message-form">
          <div class="input-container">
            <input type="number" id="input-suggested-bid" class="input-field" placeholder="Monto más alto + 100"
              readonly />
            <button type="submit" class="send-btn">
              Enviar
            </button>
          </div>
        </form>
      </section>
    </div>
  </div>

  <!-- Clasificación -->
  <div id="active-classification" class="active-content-section">
    <div class="active-panel-content">
      <table class="active-classification-table">
        <thead>
          <tr>
            <th class="position">#</th>
            <th>Usuario</th>
            <th class="amount">Oferta</th>
          </tr>
        </thead>
        <tbody id="bids-table-body">
          <!-- Filled dynamically via JavaScript -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Contenedor para el modal de método de pago -->
<div class="payment-modal-overlay" id="paymentModalOverlay">
  <div class="payment-modal-content">
    <%- include('../layouts/Metodopago') %>
  </div>
</div>

<script>
  const btn_unirse = document.getElementById('unirse');
  const chat = document.getElementById('auction-chat');
  const en_curso = document.getElementById('en_curso');
  const paymentModalOverlay = document.getElementById('paymentModalOverlay');

  function showDepositAlert() {
    return Swal.fire({
      title: 'Depósito requerido',
      text: 'Debes depositar 500 dólares para participar en 10 subastas.',
      showCancelButton: true,
      confirmButtonText: 'Ya deposité',
      cancelButtonText: 'No deposité',
      allowOutsideClick: false,
      allowEscapeKey: false,
    });
  }

  function checkOpportunities() {
    return fetch('/auctions/check-opportunities', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ auctionId: '<%= auction.id %>' }),
    }).then(response => response.json());
  }

  function handleDepositConfirmation(result) {
    if (result.isConfirmed) {
      checkOpportunities().then(data => {
        if (data.success) {
          en_curso.style.display = 'none';
          chat.style.display = 'block';
        } else {
          Swal.fire({
            title: 'Error',
            text: data.message,
            icon: 'error',
            allowOutsideClick: false,
            allowEscapeKey: false,
          }).then(() => {
            if (data.message === 'No tienes oportunidades') {
              paymentModalOverlay.style.display = 'flex';
            }
          });
        }
      }).catch(error => {
        console.error('Error al verificar oportunidades:', error);
        Swal.fire({
          title: 'Error',
          text: 'Error al verificar oportunidades',
          icon: 'error',
          allowOutsideClick: false,
          allowEscapeKey: false,
        });
      });
    } else if (result.dismiss === Swal.DismissReason.cancel) {
      paymentModalOverlay.style.display = 'flex';
    }
  }

  btn_unirse.addEventListener('click', () => {
    Swal.fire({
      title: 'Términos y condiciones',
      html: `
        <input type="checkbox" id="termsCheckbox">
        <label for="termsCheckbox">He leído y acepto los términos y condiciones</label>
      `,
      showCancelButton: true,
      confirmButtonText: 'Continuar',
      cancelButtonText: 'Cancelar',
      allowOutsideClick: false,
      allowEscapeKey: false,
      preConfirm: () => {
        const termsCheckbox = document.getElementById('termsCheckbox');
        if (!termsCheckbox.checked) {
          Swal.showValidationMessage('Debes marcar la casilla de los términos y condiciones');
          return false;
        }
        return true;
      }
    }).then((result) => {
      if (result.isConfirmed) {
        showDepositAlert().then(handleDepositConfirmation);
      }
    });
  });

  const btnRetroceder = document.getElementById('retroceder');
  btnRetroceder.addEventListener('click', () => {
    paymentModalOverlay.style.display = 'none';
    showDepositAlert().then(handleDepositConfirmation);
  });

  function closePaymentModal() {
    paymentModalOverlay.style.display = 'none';
  }
</script>

<script>
  const btnUnirse = document.getElementById('unirse');
  const chat = document.getElementById('auction-chat');
  const panelEnCurso = document.getElementById('en_curso');

  btnUnirse.addEventListener('click', () => {
    panelEnCurso.style.display = 'none';
    chat.style.display = 'block';
  });
</script>

<script type="module">
  import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js";

  const socket = io();

  // Elementos del DOM
  const formBid = document.getElementById("form-bid");
  const inputBid = document.getElementById("input-bid");
  const formSuggestedBid = document.getElementById("form-suggested-bid");
  const inputSuggestedBid = document.getElementById("input-suggested-bid");
  const messages = document.getElementById("messages");
  const progressBar = document.getElementById("timer-bar");

  // Configuración del temporizador
  const TIMER_DURATION = 30;
  let timerInterval;
  let timerCountdown = TIMER_DURATION;
  let shownAlerts = new Set();
  let isChatActive = true;

  // Variables
  let highestAmount = 0;
  const auctionId = <%= auction.id %>;
  const userId = "<%= user?.id || '0' %>";
  const userName = "<%= user?.usuario || 'Anónimo' %>";

  // Función para deshabilitar el chat
  function disableChat() {
    isChatActive = false;
    inputBid.disabled = true;
    inputSuggestedBid.disabled = true;
    formBid.querySelector("button").disabled = true;
    formSuggestedBid.querySelector("button").disabled = true;
  }

  // Función para reiniciar el temporizador
  function resetTimer() {
    clearInterval(timerInterval);
    timerCountdown = TIMER_DURATION;
    shownAlerts.clear();
    isChatActive = true;

    timerInterval = setInterval(() => {
      timerCountdown--;
      const percentage = (timerCountdown / TIMER_DURATION) * 100;

      // Actualizar la barra de progreso
      progressBar.style.width = `${percentage}%`;

      // Mostrar mensajes en momentos clave
      if (percentage <= 75 && !shownAlerts.has("una")) {
        addAlertMessage("¡A la una!");
        shownAlerts.add("una");
      } else if (percentage <= 50 && !shownAlerts.has("dos")) {
        addAlertMessage("¡A las dos!");
        shownAlerts.add("dos");
      } else if (percentage <= 10 && !shownAlerts.has("tres")) {
        addAlertMessage("¡A las tres!");
        shownAlerts.add("tres");
      } else if (timerCountdown <= 0) {
        clearInterval(timerInterval);
        progressBar.style.width = "0%";
        addAlertMessage(`¡Vendido! El ganador es: "${getWinner()}"`);
        disableChat();
      }
    }, 1000);
  }

  // Mostrar mensajes de alerta en el chat
  function addAlertMessage(message) {
    const alertMessage = `<li class="alert"><strong></strong> ${message}</li>`;
    messages.insertAdjacentHTML("beforeend", alertMessage);
    messages.scrollTop = messages.scrollHeight;
  }

  // Obtener al ganador actual
  function getWinner() {
    const messagesList = Array.from(messages.querySelectorAll("li.received, li.sent"));
    const winnerMessage = messagesList[messagesList.length - 1];
    if (!winnerMessage) return "Ningún usuario";
    const match = winnerMessage.textContent.match(/^(.*?):/);
    return match ? match[1] : "Ningún usuario";
  }

  // Unirse a la sala del remate
  socket.emit("join-auction", auctionId);

  // Cargar mensajes persistentes al unirse
  socket.on("load-messages", (loadedMessages) => {
    messages.innerHTML = "";
    loadedMessages.forEach(({ monto, usuario }) => {
      const isCurrentUser = usuario === userName;
      const messageClass = isCurrentUser ? "sent" : "received";

      const item = `<li class="${messageClass}"><strong>${usuario}:</strong> USD$${monto}</li>`;
      messages.insertAdjacentHTML("beforeend", item);

      if (monto > highestAmount) {
        highestAmount = monto;
        inputSuggestedBid.value = highestAmount + 100;
      }
    });
  });

  // Escuchar mensajes en tiempo real
  socket.on("chat-message", ({ monto, usuario, remates_id }) => {
    if (remates_id === auctionId) {
      const isCurrentUser = usuario === userName;
      const messageClass = isCurrentUser ? "sent" : "received";

      const item = `<li class="${messageClass}"><strong>${usuario}:</strong> USD$${monto}</li>`;
      messages.insertAdjacentHTML("beforeend", item);

      if (monto > highestAmount) {
        highestAmount = monto;
        inputSuggestedBid.value = highestAmount + 100;
      }

      // Reiniciar temporizador al recibir un mensaje
      resetTimer();
    }
  });

  // Manejar errores
  socket.on("error-message", (error) => addAlertMessage(`Error: ${error}`));

  // Enviar oferta manual
  formBid.addEventListener("submit", (e) => {
    e.preventDefault();
    if (!isChatActive) return addAlertMessage("El chat está deshabilitado.");

    const amount = parseFloat(inputBid.value);
    if (amount > highestAmount) {
      socket.emit("chat-message", { monto: amount, usuarios_id: userId, remates_id: auctionId });

      // Renderizar el mensaje en el cliente
      const item = `<li class="sent"><strong>${userName}:</strong> USD$${amount}</li>`;
      messages.insertAdjacentHTML("beforeend", item);

      inputBid.value = "";

      // Reiniciar temporizador al enviar un mensaje
      resetTimer();
    } else {
      addAlertMessage(`La oferta debe ser mayor a USD$${highestAmount}`);
    }
  });

  // Enviar oferta sugerida
  formSuggestedBid.addEventListener("submit", (e) => {
    e.preventDefault();
    if (!isChatActive) return addAlertMessage("El chat está deshabilitado.");

    const amount = parseFloat(inputSuggestedBid.value);
    if (amount > highestAmount) {
      socket.emit("chat-message", { monto: amount, usuarios_id: userId, remates_id: auctionId });

      // Reiniciar temporizador al enviar un mensaje
      resetTimer();
    } else {
      addAlertMessage(`La oferta debe ser mayor a USD$${highestAmount}`);
    }
  });

  // Inicializar oferta sugerida
  inputSuggestedBid.value = highestAmount + 100;
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tabs = document.querySelectorAll('.active-tab');
    const contentSections = document.querySelectorAll('.active-content-section');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const tabId = tab.getAttribute('data-tab');
        tabs.forEach(t => t.classList.remove('active'));
        contentSections.forEach(cs => cs.classList.remove('active'));
        tab.classList.add('active');
        document.getElementById(tabId).classList.add('active');
      });
    });

    // Fetch top bids and update the classification table
    const auctionId = '<%= auction.id %>';
    fetch(`/auctions/${auctionId}/top-bids`)
      .then(response => response.json())
      .then(data => {
        const bidsTableBody = document.getElementById('bids-table-body');
        bidsTableBody.innerHTML = '';
        data.forEach((bid, index) => {
          const row = document.createElement('tr');
          let positionEmoji = '';
          if (index === 0) {
            positionEmoji = '👑';
          } else if (index === 1) {
            positionEmoji = '🥈';
          } else if (index === 2) {
            positionEmoji = '🥉';
          } else {
            positionEmoji = `${index + 1}`;
          }
          row.innerHTML = `
            <td class="position">${positionEmoji}</td>
            <td>${bid.usuario}</td>
            <td class="amount">USD$ ${bid.monto}</td>
          `;
          bidsTableBody.appendChild(row);
        });
      })
      .catch(error => {
        console.error('Error al obtener las mejores ofertas:', error);
      });
  });
</script>