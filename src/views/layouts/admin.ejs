<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/css/admin/admin.css">
    <link rel="icon" type ="image/png" href="/img/Icono-admin-configuracion.png"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/admin/admin.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.min.css">
</head>
<body>
    <%- include('../admin/index') %>



    
    <script>
        // Funciones de utilidad
        const formatPrice = (price) => Number(String(price).replace(/[^0-9.-]+/g, '')) || 0;
    
        // Gestión de métricas
        function actualizarMetricas() {
          const remates = document.querySelectorAll('.property-card');
          const totalRemates = remates.length;
          let rematesActivos = 0;
          let montoTotal = 0;
    
          remates.forEach(remate => {
            if (remate.querySelector('.status-active')) {
              rematesActivos++;
            }
            const precioTexto = remate.querySelector('.property-price').textContent;
            montoTotal += formatPrice(precioTexto);
          });
    
          document.getElementById('totalRemates').textContent = totalRemates;
          document.getElementById('rematesActivos').textContent = rematesActivos;
          document.getElementById('montoTotal').textContent = `$${montoTotal.toLocaleString()}`;
        }
    
        // Gestión de búsqueda
        function buscarRemate() {
          const input = document.getElementById('buscador').value.toLowerCase();
          const remates = document.querySelectorAll('.property-card');
    
          remates.forEach(remate => {
            const texto = remate.textContent.toLowerCase();
            remate.style.display = texto.includes(input) ? 'block' : 'none';
          });
    
          actualizarMetricas();
        }
    
        // Gestión de eliminación
        function eliminarRemate(id) {
          Swal.fire({
            title: '¿Estás seguro?',
            text: `¿Quieres eliminar el remate con ID ${id}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/admin/eliminar-remate?deleteId=${id}`, {
                method: 'DELETE'
              })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    document.querySelector(`.property-card[data-id="${id}"]`).remove();
                    actualizarMetricas();
                    Swal.fire('Eliminado', 'El remate ha sido eliminado', 'success');
                  } else {
                    throw new Error(data.error || 'Error al eliminar el remate');
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire('Error', error.message, 'error');
                });
            }
          });
        }
    
        // Gestión de nuevo remate
        function abrirModalNuevoRemate() {
          document.getElementById('modalNuevoRemate').style.display = 'block';
        }
    
        function cerrarModalNuevoRemate() {
          document.getElementById('modalNuevoRemate').style.display = 'none';
          document.getElementById('formNuevoRemate').reset();
          document.getElementById('image-preview-container').innerHTML = '';
        }
    
        // Gestión de edición de remate
        function abrirModalEditar(id) {
          fetch(`/admin/editar-remate/${id}`)
            .then(response => response.json())
            .then(data => {
              document.getElementById('editId').value = data.id;
              document.getElementById('editUbicacion').value = data.ubicacion;
              document.getElementById('editPrecio').value = data.precios;
              document.getElementById('editCategoria').value = data.categoria;
              document.getElementById('editHabitaciones').value = data.N_habitacion;
              document.getElementById('editBanos').value = data.N_banos;
              document.getElementById('editPisos').value = data.pisos;
              document.getElementById('editFechaRemate').value = data.fecha_remate.split('T')[0];
              document.getElementById('editHoraRemate').value = data.hora_remate;
              document.getElementById('editEstado').value = data.estado;
              document.getElementById('editPisina').value = data.pisina;
              document.getElementById('editPatio').value = data.patio;
              document.getElementById('editCocina').value = data.cocina;
              document.getElementById('editCochera').value = data.cochera;
              document.getElementById('editBalcon').value = data.balcon;
              document.getElementById('editJardin').value = data.jardin;
              document.getElementById('editComedor').value = data.comedor;
              document.getElementById('editSalaStart').value = data.sala_start;
              document.getElementById('editStudio').value = data.studio;
              document.getElementById('editLavanderia').value = data.lavanderia;
              document.getElementById('editDescripcion').value = data.descripcion;
    
              document.getElementById('editModal').style.display = 'block';
            })
            .catch(error => {
              console.error('Error:', error);
              Swal.fire('Error', 'Error al cargar los datos del remate', 'error');
            });
        }
    
        function cerrarModal() {
          document.getElementById('editModal').style.display = 'none';
        }
    
        async function guardarCambios(event) {
          event.preventDefault();
    
          const formData = new FormData(event.target);
          const id = document.getElementById('editId').value;
    
          try {
            const response = await fetch(`/admin/editar-remate/${id}`, {
              method: 'POST',
              body: formData
            });
    
            const data = await response.json();
    
            if (data.success) {
              Swal.fire({
                title: '¡Éxito!',
                text: 'Remate actualizado correctamente',
                icon: 'success'
              }).then(() => {
                window.location.reload();
              });
            } else {
              throw new Error(data.message || 'Error al actualizar el remate');
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error',
              text: error.message,
              icon: 'error'
            });
          }
        }
    
        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
          actualizarMetricas();
    
          // Manejador para cerrar modales al hacer clic fuera
          window.onclick = function (event) {
            const modalNuevo = document.getElementById('modalNuevoRemate');
            const modalEditar = document.getElementById('editModal');
    
            if (event.target === modalNuevo) {
              cerrarModalNuevoRemate();
            }
    
            if (event.target === modalEditar) {
              cerrarModal();
            }
          };
    
          // Manejador para la carga de imágenes
          document.getElementById('file-upload').addEventListener('change', function (event) {
            const files = event.target.files;
            const minFiles = 1;
            const maxFiles = 10;
    
            if (files.length < minFiles || files.length > maxFiles) {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: `Debes subir entre ${minFiles} y ${maxFiles} fotos.`,
              });
              event.target.value = "";
              return;
            }
    
            const imagePreviewContainer = document.getElementById('image-preview-container');
            imagePreviewContainer.innerHTML = "";
    
            for (let i = 0; i < files.length; i++) {
              const file = files[i];
              const reader = new FileReader();
    
              reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.className = 'preview-img';
                imagePreviewContainer.appendChild(img);
              };
    
              reader.readAsDataURL(file);
            }
          });
        });
      </script>    
</body>
</html>